" ========= Handbook v2 =========
" --- General ---
" You can find a list of commands here:
" - https://jb.gg/h38q75 -
" Find more examples here:
" - https://jb.gg/share-ideavimrc -
"
" --- Plug ---
" - https://jb.gg/ideavim-plugins -
" --- Map IDE actions to IdeaVim ---
" - https://jb.gg/abva4t -
"
" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)
" Map <leader>d to start debug
"map <leader>d <Action>(Debug)
" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)
"
" use :actionlist to check all available actions
" ============ END ============


"
" Basic settings
"
filetype on
filetype plugin indent on

set number
set relativenumber
set cursorline

syntax enable
syntax on

" Tab settings
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4

set list
set listchars=tab:▸\ ,trail:▫

set scrolloff=5

set splitright
set splitbelow

" Prevent auto line split
set wrap
set tw=0

set indentexpr=

" Better backspace
set backspace=indent,eol,start

set foldmethod=indent
set foldlevel=99

" Better command line
set laststatus=2
set autochdir
set showcmd
set formatoptions-=tc

" Show command autocomplete
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu

" show a navigable menu for tab completion
set wildmode=longest,list,full

" Searching options
set hlsearch
exec "nohlsearch"
set incsearch
set ignorecase
set smartcase

" Color Scheme
set termguicolors
let g:gruvbox_italic=0
set background=dark
colorscheme gruvbox

" EOL format
set fileformat=unix

" conceal
set conceallevel=0
set concealcursor=n


"
" Basic key mapping
"

" <Esc> alternative
"inoremap jk <Esc>

" Leader Key
let mapleader = "\<space>"

" Copy to system clipboard
noremap <leader>y "+y

" Paste from system clipboard
noremap <leader>p "+p

" Split Windows
nmap <leader>- :split<CR>
" ! supposed to be the pipe, an issue
"nmap <leader>| :vsplit<CR>

" side-bar
nmap <leader>e <Action>(SelectInProjectView)
nmap <leader>E <Action>(SelectInProjectView)

" Document / Hover
nmap K <Action>(QuickJavaDoc)

" Definition
nmap <leader>gd <Action>(QuickImplementations)

" Rename
map <leader>cr <Action>(RenameElement)
map <leader>cR <Action>(RenameFile)

" Format
" ! When supports `&filetype`, set prettier only for [.js, .jsx, .ts, .tsx, .vue] and set embedded formatter for the rest files. Or when autocmd supported.
"autocmd FileType vue,javascript,typescript,jsx,tsx,json,html,scss,sass,less map <leader>= <Action>(ReformatWithPrettierAction)
if &ide =~? 'webstorm'
  nmap <leader>cf <Action>(ReformatWithPrettierAction)
else
  nmap <leader>cf <Action>(ReformatCode)
endif

" Navigate tabs
nmap H <Action>(PreviousTab)
nmap L <Action>(NextTab)

" Collapse to specific level
nmap <leader>z1 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel1)
nmap <leader>z2 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel2)
nmap <leader>z3 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel3)
nmap <leader>z4 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel4)
nmap <leader>z5 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel5)

" Navigate among projects
nmap <leader>fp <Action>(ManageRecentProjects)
nmap <leader>pq <Action>(CloseProject)

" Copy-related
nmap <leader>ya <Action>(CopyAbsolutePath)
nmap <leader>yr <Action>(CopyPathFromRepositoryRootProvider)
nmap <leader>yf <Action>(CopyFileName)

"
" Plug
"
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'
Plug 'easymotion/vim-easymotion'
" Plug end


"
" Plug key mapping
"

" vim-surround
let g:surround_no_mappings=1
map gsd <Plug>DSurround
map gsr <Plug>CSurround
map gsa <Plug>YSurround


"
" JetBrains' IDEs Plug mapping -> *INSTALL PLUGIN FIRST*
"

" easymotion
let g:EasyMotion_do_mapping=0
let g:EasyMotion_smartcase=1
map s <Plug>(easymotion-s)
"map f <Plug>(easymotion-f)
"map F <Plug>(easymotion-F)
"map t <Plug>(easymotion-t)
"map T <Plug>(easymotion-T)

" Tab Shifter
map <C-w>H <Action>(TabShiftActions.ShiftLeft)
map <C-w>L <Action>(TabShiftActions.ShiftRight)
map <C-w>K <Action>(TabShiftActions.ShiftDown)
map <C-w>J <Action>(TabShiftActions.ShiftUp)

" Tab Mover
map <leader>tH <Action>(com.mnw.tabmover.actions.MoveTabUpAction)
map <leader>tL <Action>(com.mnw.tabmover.actions.MoveTabDownAction)
map <leader>tK <Action>(com.mnw.tabmover.actions.MoveTabToFirstAction)
map <leader>tJ <Action>(com.mnw.tabmover.actions.MoveTabToLastAction)
