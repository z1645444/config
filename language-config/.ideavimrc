" --------- Handbook ---------
" --- General ---
" .ideavimrc is a configuration file for IdeaVim plugin. It uses
"   the same commands as the original .vimrc configuration.
" You can find a list of commands here:
" - https://jb.gg/h38q75 -
" Find more examples here:
" - https://jb.gg/share-ideavimrc -
"
" --- Hint ---
" Don't use Ex mode, use Q for formatting.
" map Q gq
"
" --- Plug ---
" - https://jb.gg/ideavim-plugins -
" --- Map IDE actions to IdeaVim ---
" - https://jb.gg/abva4t -
" Map \r to the Reformat Code action
"map \r <Action>(ReformatCode)

" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)
" --------- Handbook ---------

" use :actionlist to check all available actions

"
" Basic settings
"
filetype on
filetype plugin indent on

set number
set relativenumber
set ruler
set cursorline

syntax enable
syntax on

" Tab settings
set expandtab
set softtabstop=4
set shiftwidth=4
set tabstop=4

set list
set listchars=tab:▸\ ,trail:▫

set scrolloff=5

set splitright
set splitbelow

" Prevent auto line split
set wrap
set tw=0

set indentexpr=

" Better backspace
set backspace=indent,eol,start

set foldmethod=indent
set foldlevel=99

" Prevent incorrect background rendering
let &t_ut=''

let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Restore Cursor Position
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

set laststatus=2
set autochdir
set showcmd
set formatoptions-=tc

" Show command autocomplete
set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
set wildmenu

" show a navigable menu for tab completion
set wildmode=longest,list,full

" Searching options
set hlsearch
exec "nohlsearch"
set incsearch
set ignorecase
set smartcase

" Color Scheme
set termguicolors
let g:gruvbox_italic=0
set background=dark
colorscheme gruvbox

" EOL format
set fileformat=unix

" conceal
set conceallevel=0
set concealcursor=n


"
" Key mapping
"

" <Esc> alternative
"inoremap jk <Esc>

" Leader Key
let mapleader = "\<space>"

" Find next capital letter
nnoremap <leader>w /\u<CR>:noh<CR>
vnoremap <leader>w /\u<CR>:noh<CR>

" Copy to system clipboard
vnoremap <leader>y "+y

" Paste from system clipboard
vnoremap <leader>p "+p
nnoremap <leader>p "+p

" Split Windows
nnoremap <leader>sp :split<CR>
nnoremap <leader>vp :vsplit<CR>

" Reload
nnoremap <leader>rl :source %<CR>

" Scroll
nnoremap <leader>j 20j
nnoremap <leader>k 20k
vnoremap <leader>j 20j
vnoremap <leader>k 20k

" Nerdtree
nnoremap <leader>tt :NERDTree<CR>
nnoremap <leader>tf :NERDTreeFocus<CR>
nnoremap <leader>tg :NERDTreeToggle<CR>
nnoremap <leader>tf :NERDTreeFind<CR>

" Document
map K <Action>(QuickJavaDoc)

" Definition
map <leader>df <Action>(QuickImplementations)

" Rename
map <leader>rn <Action>(RenameElement)

" Format
map <leader>= <Action>(ReformatCode)

" Collapse to specific level
map <leader>z1 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel1)
map <leader>z2 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel2)
map <leader>z3 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel3)
map <leader>z4 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel4)
map <leader>z5 <Action>(CollapseAllRegions) <Action>(ExpandAllToLevel5)

"
" Plug
"
Plug 'machakann/vim-highlightedyank'
Plug 'tpope/vim-surround'
Plug 'preservim/nerdtree'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-commentary'
Plug 'machakann/vim-highlightedyank'
" Plug end


"
" WebStorm map
"


"
" EXT Plug map -> REMEMBER TO INSTALL PLUGIN FIRST
"

" Tab Shifter
map <C-w>H <Action>(TabShiftActions.ShiftLeft)
map <C-w>L <Action>(TabShiftActions.ShiftRight)
map <C-w>K <Action>(TabShiftActions.ShiftDown)
map <C-w>J <Action>(TabShiftActions.ShiftUp)

" Tab Mover
map <leader>t< <Action>(com.mnw.tabmover.actions.MoveTabUpAction)
map <leader>t> <Action>(com.mnw.tabmover.actions.MoveTabDownAction)
map <leader>t[ <Action>(com.mnw.tabmover.actions.MoveTabToFirstAction)
map <leader>t] <Action>(com.mnw.tabmover.actions.MoveTabToLastAction)
